一、试画出线程生命周期图
	     堵塞
新建――>就绪――>运行――>死亡


新建：创建了线程对象，但没有调用start方法
就绪：调用了start方法，但没有抢占到cpu占用权
运行：抢占到了cpu占用权
死亡：线程正常执行结束|error或Exception意外退出|break或return正常退出

堵塞:在运行状态期间调用了 sleep|wait|join。当sleep时间到或调用了notify等，也会从堵塞状态切换到就绪状态




二、线程同步的两种方式

方式一：使用同步代码块
synchronized(锁对象){


	//需要同步的代码
}


方式二：使用同步方法

public synchronized 返回类型 方法名(参数列表){

	//需要同步的代码
}




三、使用匿名内部类创建一个新线程，实现循环打印100以内奇数的和，并启动该新线程

语法：
new 父类或接口名(){};


方式一：通过继承Thread

new Thread(){
	public void run(){
		int sum = 0;
		for(int i=1;i<=100;i++){

			if(i%2!=0)
				sum+=i;
		}
	}


}.start();



方式二：通过实现Runnable


new Thread(new Runnable(){

	public void run(){
		int sum = 0;
		for(int i=1;i<=100;i++){

			if(i%2!=0)
				sum+=i;
		}
	}


}).start();





四、线程创建并启动两种方式的对比

1.使用实现Runnable接口的方式，更加灵活，避免了单继承的局限性
2.使用实现Runnable接口的方式，更加适合解决处理共享资源的情况





























