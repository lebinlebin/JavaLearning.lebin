本单元目标
1.反射的理解和好处

2.Class类的理解和特点

3.通过反射获取类中的成员【了解】

4.通过反射创建对象【掌握】

5.通过反射调用类中的成员【掌握】

6.通过反射观察泛型的本质

一、理解
			new            对象.成员
正常程序： 类——————>对象——————>调用类中的成员
		  getClass        getMethod().invoke()
反射：对象——————>类————————>调用类中的成员


二、好处

反射是java实现动态语言的关键。
静态加载：编译期加载。 编译时就加载所有的类，如果没有该类，则直接报编译错误，依赖性太强
动态加载：（反射）运行期加载。运行时加载用到的类，编译时如果该类不存在，不报编译错误，降低了依赖性


三、类的加载过程【了解】

1、装载
	通过类加载器将字节码文件读入到方法区中，并为之开辟Class类的对象

2、链接
	将读入到方法区的字节码文件中的二进制数据合并到JRE

3、初始化
	将类中的静态成员进行初始化



四、类加载器【了解】

一）类加载器分类

启动类加载器
	引导类加载器
	扩展类加载器
	系统类加载器
用户自定义加载器


二）类加载器加载的机制
先从下往上 ，检测该类是否被加载器加载过。
然后再从上往下，依次判断类加载器是否可以加载该类！


三）获取类加载器

1、获取系统类加载器
ClassLoader loader = ClassLoader.getSystemClassLoader();

2、获取扩展类加载器
ClassLoader extLoader = loader.getParent();

3、获取引导类加载器

ClassLoader bootLoader = extLoader.getParent();


4、获取某个类所使用的类加载器

ClassLoader cl = 对应类的Class类对象.getClassLoader();




Java编译期和运行期

编译期: 是指把源码交给编译器编译成计算机可以执行的文件的过程．在Java中也就是把Java代码编成class文件的过程.
编译期只是做了一些翻译功能,并没有把代码放在内存中运行起来,而只是把代码当成文本进行操作,比如检查错误.
运行期:是把编译后的文件交给计算机执行.直到程序运行结束.所谓运行期就把在磁盘中的代码放到内存中执行起来.
在Java中把磁盘中的代码放到内存中就是类加载过程.类加载是运行期的开始部分,后面会介绍下类加载.

编译期分配内存并不是说在编译期就把程序所需要的空间在内存中分配好,而是说在编译期生成的代码中产生一些指令,在运行代码时通过这些指令把程序所需的内存分配好.只不过在编译期的时候就知道分配的大小,并且知道这些内存的位置.
而运行期分配内存是指只有在运行期才确定内存的大小,存放的位置.

Java中的绑定:    绑定指的是把一个方法的调用与方法所在的类(方法主体)关联起来(这个方法被哪个类调用).对Java来说,
分为静态绑定和动态绑定.

静态调用:在程序执行前方法已经被绑定,也就是在编译期方法明确知道被哪个类调用.java当中的方法只有final，static，private和构造方法是前期绑定的。
动态调用:在运行时根据具体对象的类型进行绑定(只有运行时才知道方法被哪个类调用).在java中，几乎所有的方法都是后期绑定的。
总结:编译期可以编写一些指令,可以在运行前就知道结果.


=====================================================
Class类的理解 和特点

一、特点

1、Class本身就是一个类型 java.lang.Class
2、Class类的对象是系统创建的，也就是通过类加载器将字节码文件装载到jvm中的方法区中，从而生成了Class类对象
我们可以通过三种方式获取Class类对象   见下二

3、Class类的对象实际上对应了一个字节码文件
4、对于某个特定类来讲，它的Class类对象只有一份，因为类只能加载一次！
5、对于某个特定类来讲，它的每个对象都能记得它是由哪个类创建的
也就是说，我们可以通过对象得到它的Class类对象
6、通过Class类的对象，可以解剖得到对应的类的完整结构，包含属性、方法、构造、包等信息

二、获取Class类对象的三种方式
1、Class.forName(全类名);
2、对象名.getClass()
3、类名.class


========================================================

通过反射创建类的对象

方式一：调用无参构造器【推荐使用】

Class c = Class.forName("Student全类名");
Object o = c.newInstance();



方式二：调用有参构造器
Class c = Class.forName("Student全类名");
Constructor con = c.getDeclaredConstructor(String.class);
con.setAccession(true);
Object o = con.newInstance("john");

========================================================

通过反射调用类中的属性和方法

一、属性
1.获取指定的Field对象
Field field =clazz.getDeclaredField("属性名");
2.创建对象
Object obj = clazz.newInstance();
3.暴破
field.setAccessible(true);
4.为属性赋值
field.set(obj,value);
5.读取属性
Object value = field.get(obj);


二、方法
1.获取指定的Method对象
Method method = clazz.getDeclaredMethod(方法名，Class...cs);
2.创建对象
Object obj = clazz.newInstance();
3.暴破
method.setAccessible(true);
4.调用方法
method.invoke(obj,Object...obj);


========================================================
通过反射获取类中的成员【了解】

Class c = String.class;

一、属性
Field[] fields = c.getFields();//获取public修饰的所有属性，包含从父类继承来的，不限于直接父类
Field[] fields = c.getDeclaredFields();//获取本类中定义的所有属性，不问修饰符
getFields()：获得某个类的所有的公共（public）的字段，包括父类中的字段。 
getDeclaredFields()：获得某个类的所有声明的字段，即包括public、private和proteced，但是不包括父类的申明字段。

同样类似的还有getConstructors()和getDeclaredConstructors()、getMethods()和getDeclaredMethods()，这两者分别表示获取某个类的方法、构造函数。


二、方法
Method[] methods = c.getMethods();//获取public修饰的所有方法，包含从父类继承来的，不限于直接父类
Method[] methods = c.getDeclaredMethods();//获取本类中定义的所有方法，不问修饰符
三、构造器
Constructor[] cons = c.getDeclaredConstructors();//获取本类中定义的所有构造器，不问修饰符

四、包
Package package = c.getPackage();

五、父类
Class parent = c.getSuperClass();
六、接口
Class[] interfaces = c.getInterfaces();
七、父类的泛型
Type t = c.getGenericSuperClass();
ParameterizedType pt = (ParameterizedType)t;
Class c = (Class)(pt.getActualArguments()[0]);
String name = c.getSimpleName();

八、接口的泛型
Type[] ts = c.getGenericInterfaces();
for(Type t:ts){
	if(!(t instanceof ParameterizedType))
		continue;
	ParameterizedType pt = (ParameterizedTypse)t;
	Class c = (Class)(pt.getActualArguments()[0]);
	String name = c.getSimpleName();

}
九、注解

Annotation[] anns = c.getAnnotations();
for(Annotation a : anns){
	syso(a.annotationType().getsimpleName())

}
=================================================================
通过反射观察泛型的本质【面试题】