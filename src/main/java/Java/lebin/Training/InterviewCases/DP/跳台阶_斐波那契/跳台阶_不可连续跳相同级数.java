package Java.lebin.Training.InterviewCases.DP.跳台阶_斐波那契;
/*
一个台阶总共有n 级，如果一次可以跳1 级，也可以跳2 级，也可以跳3级，但是不能连续跳相同的级数。例如，第一次跳了1级，第二次只能跳2级或者3级。求总共有多少总跳法。
 */
/*
dp[i][j]表示跳到第i阶，最后一步跳了j级。该状态依赖于前面的状态，前面状态的最后一步起跳不能为j。

dp[4][1]表示跳到第4阶，最后一步跳了1级，因为从第3阶跳到第4阶需要跳1阶，那么到达第3阶的时候，最后一步就只能为2，或者3。
dp[4][2]表示跳到第4阶，最后一步跳了2级，因为从第2阶跳到第4阶需要跳2阶，那么到达第2阶的时候，最后一步就只能为1，或者3。
dp[4][3]表示跳到第4阶，最后一步跳了3级，因为从第1阶跳到第4阶需要跳3阶，那么到达第1阶的时候，最后一步就只能为1，或者2。
最后到达第4阶，可以从前面的3，2，1阶分别起跳。所以求和。
 */
public class 跳台阶_不可连续跳相同级数 {
    public static int jump(int n) {
        int[][] dp = new int[n + 1][4]; // dp[i][j] 跳到第 i 阶，最后一步跳了 j 级
        dp[1][1] = 1;
        dp[2][2] = 1;
        dp[3][1] = 1;
        dp[3][2] = 1;
        dp[3][3] = 1;
        for (int i = 4; i <= n; i++) {
            dp[i][1] = dp[i-1][2]+dp[i-1][3];
            dp[i][2] = dp[i-2][1]+dp[i-2][3];
            dp[i][3] = dp[i-3][1]+dp[i-3][2];
        }
        return dp[n][1] + dp[n][2] + dp[n][3];
    }
}
