package Java.lebin.Training.InterviewCases.DP.跳台阶_斐波那契;
/*
#70. 爬楼梯（进阶版）
卡码网：57. 爬楼梯(opens new window)
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬至多m (1 <= m < n)个台阶。你有多少种不同的方法可以爬到楼顶呢？
注意：给定 n 是一个正整数。
输入描述：输入共一行，包含两个正整数，分别表示n, m
输出描述：输出一个整数，表示爬到楼顶的方法数。

输入示例：3 2
输出示例：3
提示：
当 m = 2，n = 3 时，n = 3 这表示一共有三个台阶，m = 2 代表你每次可以爬一个台阶或者两个台阶。
此时你有三种方法可以爬到楼顶。
1 阶 + 1 阶 + 1 阶段
1 阶 + 2 阶
2 阶 + 1 阶
#
 */
public class 变态跳台阶 {
    /*
	题目描述
	一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
	解题思路
	f(1) = 1
	f(2) = f(2-1) + f(2-2)
	f(3) = f(3-1) + f(3-2) + f(3-3)
	...
	f(n) = f(n-1) + f(n-2) + f(n-3) + ... + f(n-(n-1)) + f(n-n)

	要跳到第n级，
	第一种方法是：最后一步只跳一级，则前面需要跳n-1级，这n-1 级的跳法有f(n-1)种；
	第二种方法是：最后一步只跳两级，则前面需要跳 n-2级，则 前面 n-2 级的跳法有f(n-2) 种；
	以此类推，直到最后，一次跳 n 级，则此时只有一种跳法，即最后的+1。

	f(n) = f(n-1)+f(n-2)+...+f(n-(n-1)) + f(n-n)
	f(n-1) = f(n-2)+...+f(n-(n-1)) + f(n-n)
	===> f(n) = 2 * f(n-1)
	最后可以得到
	f(n) = 1, (n=0)
	f(n) = 1, (n=1)
	f(n) = 2*f(n-1),(n>=2)
	 */
    public int JumpFloorII(int target) {
        if (target <= 0)
            return 0;
        if (target == 1 || target == 2)
            return target;
        else
            return 2 * JumpFloorII(target - 1);
    }
}
