package Java.lebin.Training.InterviewCases.DP.买卖股票;
/**
 * 交易次数==2的股票交易
 * 123. 买卖股票的最佳时机 III
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 //你最多可以完成 两笔 交易。
 */
/*
1. dp定义
	一天一共就有五个状态，
	没有操作 （其实我们也可以不设置这个状态） 0
	第一次持有股票  1
	第一次不持有股票 2
	第二次持有股票 3
	第二次不持有股票 4
	dp[i][j]中 i表示第i天，j为 [0 - 4] 五个状态，dp[i][j]表示第i天状态j所剩最大现金。
2. 递推公式
	达到dp[i][1]状态，有两个具体操作：
	操作一：第i天买入股票了，那么dp[i][1] = dp[i-1][0] - prices[i]
	操作二：第i天没有操作，而是沿用前一天买入的状态，即：dp[i][1] = dp[i - 1][1]
	选最大的，所以 dp[i][1] = max(dp[i-1][0] - prices[i], dp[i - 1][1]);

	同理dp[i][2]也有两个操作：
	操作一：第i天卖出股票了，那么dp[i][2] = dp[i - 1][1] + prices[i]
	操作二：第i天没有操作，沿用前一天卖出股票的状态，即：dp[i][2] = dp[i - 1][2]
	所以dp[i][2] = max(dp[i - 1][1] + prices[i], dp[i - 1][2])

	同理可推出剩下状态部分：
	dp[i][3] = max(dp[i - 1][3], dp[i - 1][2] - prices[i]);
	dp[i][4] = max(dp[i - 1][4], dp[i - 1][3] + prices[i]);

3. 初始化
	第0天没有操作，这个最容易想到，就是0，即：dp[0][0] = 0;
	第0天做第一次买入的操作，dp[0][1] = -prices[0];
	dp[0][2] 第0天做第一次卖出的操作，可以理解当天买入，当天卖出，所以dp[0][2] = 0;
	dp[0][3] 第0天第二次买入操作，相当于第0天第一次买入了，第一次卖出了，然后再买入一次（第二次买入），那么现在手头上没有现金，只要买入，现金就做相应的减少。
	dp[0][3] = -prices[0];
	同理第二次卖出初始化dp[0][4] = 0;
4. 遍历顺序
	从递归公式其实已经可以看出，一定是从前向后遍历，因为dp[i]，依靠dp[i - 1]的数值。
 */
public class _123_买卖股票的最佳时机3 {
	//时间复杂度：O(n)
	//空间复杂度：O(n × 5)
	public int maxProfit(int[] prices) {
		int len = prices.length;
		// 边界判断, 题目中 length >= 1, 所以可省去
		if (prices.length == 0) return 0;
		/*
		 * 定义 5 种状态:
		 * 0: 没有操作, 1: 第一次买入, 2: 第一次卖出, 3: 第二次买入, 4: 第二次卖出
		 */
		int[][] dp = new int[len][5];
		dp[0][1] = -prices[0];
		// 初始化第二次买入的状态是确保 最后结果是最多两次买卖的最大利润
		dp[0][3] = -prices[0];

		for (int i = 1; i < len; i++) {
			dp[i][0] = dp[i - 1][0];
			dp[i][1] = Math.max(dp[i - 1][1], -prices[i]);
			dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1] + prices[i]);
			dp[i][3] = Math.max(dp[i - 1][3], dp[i - 1][2] - prices[i]);
			dp[i][4] = Math.max(dp[i - 1][4], dp[i - 1][3] + prices[i]);
		}

		return dp[len - 1][4];
	}
}


